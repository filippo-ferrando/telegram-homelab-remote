 
# Generated by CodiumAI

# Dependencies:
# pip install pytest-mock
import pytest

class TestPlaybookRunner:

    # Tests that the method successfully runs a playbook with a valid name
    def test_happy_path_valid_playbook_name(self, mocker):
        # Mock the ansible_runner.run method
        mocker.patch('ansible_runner.run')
        # Call the playbook_runner method with a valid playbook name
        status, rc = playbook_runner("valid_playbook.yml")
        # Assert that the ansible_runner.run method was called with the correct arguments
        ansible_runner.run.assert_called_once_with(private_data_dir='/tmp/', playbook="valid_playbook.yml")
        # Assert that the status and rc values are returned correctly
        assert status == ansible_runner.run.return_value.status
        assert rc == ansible_runner.run.return_value.rc

    # Tests that the method fails to run a playbook with an invalid name
    def test_edge_case_invalid_playbook_name(self, mocker):
        # Mock the ansible_runner.run method to raise an exception
        mocker.patch('ansible_runner.run', side_effect=Exception("Invalid playbook name"))
        # Call the playbook_runner method with an invalid playbook name
        with pytest.raises(Exception) as e:
            playbook_runner("invalid_playbook.yml")
        # Assert that the exception is raised correctly
        assert str(e.value) == "Invalid playbook name"

    # Tests that the method fails to run a playbook with an invalid path
    def test_edge_case_invalid_playbook_path(self, mocker):
        # Mock the ansible_runner.run method to raise an exception
        mocker.patch('ansible_runner.run', side_effect=Exception("Invalid playbook path"))
        # Call the playbook_runner method with an invalid playbook path
        with pytest.raises(Exception) as e:
            playbook_runner("/invalid/path/playbook.yml")
        # Assert that the exception is raised correctly
        assert str(e.value) == "Invalid playbook path"

    # Tests that the method fails to run a playbook with an invalid format
    def test_edge_case_invalid_playbook_format(self, mocker):
        # Mock the ansible_runner.run method to raise an exception
        mocker.patch('ansible_runner.run', side_effect=Exception("Invalid playbook format"))
        # Call the playbook_runner method with an invalid playbook format
        with pytest.raises(Exception) as e:
            playbook_runner("invalid_playbook.txt")
        # Assert that the exception is raised correctly
        assert str(e.value) == "Invalid playbook format"

    # Tests that the method handles a playbook run with extra_vars
    def test_extra_vars(self, mocker):
        # Mock the ansible_runner.run method
        mocker.patch('ansible_runner.run')
        # Call the playbook_runner method with extra_vars
        status, rc = playbook_runner("playbook.yml", extra_vars={"var1": "value1", "var2": "value2"})
        # Assert that the ansible_runner.run method was called with the correct arguments
        ansible_runner.run.assert_called_once_with(private_data_dir='/tmp/', playbook="playbook.yml", extra_vars={"var1": "value1", "var2": "value2"})
        # Assert that the status and rc values are returned correctly
        assert status == ansible_runner.run.return_value.status
        assert rc == ansible_runner.run.return_value.rc

    # Tests that the method handles a playbook run with tags
    def test_tags(self, mocker):
        # Mock the ansible_runner.run method
        mocker.patch('ansible_runner.run')
        # Call the playbook_runner method with tags
        status, rc = playbook_runner("playbook.yml", tags=["tag1", "tag2"])
        # Assert that the ansible_runner.run method was called with the correct arguments
        ansible_runner.run.assert_called_once_with(private_data_dir='/tmp/', playbook="playbook.yml", tags=["tag1", "tag2"])
        # Assert that the status and rc values are returned correctly
        assert status == ansible_runner.run.return_value.status
        assert rc == ansible_runner.run.return_value.rc

# Generated by CodiumAI

# Dependencies:
# pip install pytest-mock
import pytest

class TestCustomCommandRunner:

    # Runs command on specified host
    def test_runs_command_on_specified_host(self, mocker):
        mocker.patch('subprocess.check_output')
        custom_command_runner('host1', 'command')
        subprocess.check_output.assert_called_with("ansible host1 -m shell -a 'command'", shell=True, stderr=subprocess.STDOUT)

    # Returns output of command
    def test_returns_output_of_command(self, mocker):
        mocker.patch('subprocess.check_output', return_value='output')
        response = custom_command_runner('host1', 'command')
        assert response == 'output'

    # Raises error if host is not found
    def test_raises_error_if_host_not_found(self, mocker):
        mocker.patch('subprocess.check_output', side_effect=subprocess.CalledProcessError(1, ''))
        with pytest.raises(subprocess.CalledProcessError):
            custom_command_runner('host1', 'command')

    # Raises error if command is not valid
    def test_raises_error_if_command_not_valid(self, mocker):
        mocker.patch('subprocess.check_output', side_effect=subprocess.CalledProcessError(1, ''))
        with pytest.raises(subprocess.CalledProcessError):
            custom_command_runner('host1', 'command')

    # Supports running command on multiple hosts
    def test_supports_running_command_on_multiple_hosts(self, mocker):
        mocker.patch('subprocess.check_output')
        custom_command_runner('host1,host2', 'command')
        subprocess.check_output.assert_called_with("ansible host1,host2 -m shell -a 'command'", shell=True, stderr=subprocess.STDOUT)

    # Supports running command on host group
    def test_supports_running_command_on_host_group(self, mocker):
        mocker.patch('subprocess.check_output')
        custom_command_runner('group1', 'command')
        subprocess.check_output.assert_called_with("ansible group1 -m shell -a 'command'", shell=True, stderr=subprocess.STDOUT)